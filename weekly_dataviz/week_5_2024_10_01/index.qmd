---
title: "DataViz 2024-10-04"
description: "Financial Markets Historical Performance"
author: "Cozmina Secula"
date: "2024-10-04"
image: index_lineplot.png
code-link: true
code-tools: true
code-fold: true
code-summary: "Show the code"
title-block-banner: true
filters: 
  - shinylive
---

<br>

## *Financial Markets Historical Performance*

Back to [Makeover Monday](https://makeovermonday.co.uk/) for this week's data visualization challenge! The main goal is to improve the original chart displaying "Annual Revenue".

## About the Dataset

[SOURCE: FTSE 100 vs MSCI China vs Nasdaq-100 vs NYSE Arca Gold BUGS vs S&P 500: historical performance from 2008 to 2024 (curvo.eu)](https://curvo.eu/backtest/en/compare-indexes/euro-stoxx-50-vs-ftse-100-vs-msci-china-vs-nasdaq-100-vs-nyse-arca-gold-bugs-vs-sp-500?currency=usd)

\*Prices shown in dollars

## The Visualization

This week, I created two charts.

- The first chart recreates the [original chart](https://curvo.eu/backtest/en/compare-indexes/euro-stoxx-50-vs-ftse-100-vs-msci-china-vs-nasdaq-100-vs-nyse-arca-gold-bugs-vs-sp-500?currency=usd) for the historical performance of various indices. 

### Historical Performance

```{r}
#| label: historical performance
#| warning: false
#| message: false

library(tidyverse)
library(janitor)

source("theme_rdv.R")

df <- readxl::read_excel("Indexes Data.xlsx")

df <- df |>
  mutate(date = as.Date(paste0("01/", Date), format = "%d/%m/%Y")) |>
  select(-Date) |>
  clean_names() |>
  pivot_longer(cols = c("euro_stoxx_50", "ftse_100", "msci_china", "nasdaq_100", "nyse_arca_gold_bugs", "s_p_500"), names_to = "index", values_to = "price") |>
  mutate(price = round(price, 2)) |>
mutate(index = case_when(
    index == "euro_stoxx_50" ~ "EURO STOXX 50",
    index == "ftse_100" ~ "FTSE 100",
    index == "msci_china" ~ "MSCI China",
    index == "nasdaq_100" ~ "Nasdaq-100",
    index == "nyse_arca_gold_bugs" ~ "NYSE Arca Gold BUGS",
    index == "s_p_500" ~ "S&P 500",
    TRUE ~ index  
  ))

color_palette <- c(
  "EURO STOXX 50" = "#174A7E",
  "FTSE 100" = "#c97b1d",
  "MSCI China" = "#800000",
  "Nasdaq-100" = "#95B3D7",
  "NYSE Arca Gold Bugs" = "#fdbf11",
  "S&P 500" = "#0C8040"
)

labels_last_value <- df |>
  group_by(index) |>
  filter(date == last(date)) |>  
  summarise(last_price = last(price),  
            last_date = last(date)) |>
  ungroup()

break.vec <- c(as.Date("2011-08-01"),
               seq(from = as.Date("2011-08-01"), to = as.Date("2024-07-01"),
                 by = "2 years"),
               as.Date("2024-07-01"))


p1 <- ggplot(df) +
  geom_line(aes(x = date, 
                y = price, 
                color = index, 
                group = index)) +
  scale_x_date(breaks = break.vec,   
               labels = scales::date_format("%Y"),
               expand = expansion(mult = c(0.1, 0.3))
               ) +
  scale_y_continuous(limits = c(0, 100000),
                     breaks = seq(from = 0, to = 100000, by = 20000),
                     labels = scales::dollar_format(scale = 1)) +
  scale_color_manual(values = color_palette) +
  labs(title = "Financial Markets Historical Performance",
       subtitle = "Time period: August 2011 to July 2024",
       y = "Value of portfolio",
       x = "") +
  theme_rdv() +
  theme(
    legend.position = "none"
  ) +
  geom_text(data = labels_last_value,
            aes(x = last_date,
                y = last_price, 
                label = index,
                color = index),
            hjust = -0.05,  
            vjust = 0.5)   


ggsave(p1, filename = "financial_markets.png",
       width = 10, height = 7.5, dpi = 300)

```

![](financial_markets.png)


- The second chart presents a more effective way to display the annual returns of these indices over the last 14 years.

### Annual Returns

```{r}
#| warning: false
#| message: false

library(ggtext)
source("theme_rdv.R")

df <- read_csv("stock_indices_performance.csv")

df_long <- df |>
  pivot_longer(cols = c("EURO STOXX 50", "FTSE 100", "MSCI China", "Nasdaq-100", "NYSE Arca Gold Bugs", "S&P 500"),
               names_to = "index",
               values_to = "performance") |>
  mutate(performance = as.numeric(str_remove(performance, "%"))) |>
  clean_names()

df_long$year <- as.numeric(df_long$year)

# Customize colors for the indices
index_colors <- c(
  "EURO STOXX 50" = "#174A7E",
  "FTSE 100" = "#c97b1d",
  "MSCI China" = "#800000",
  "Nasdaq-100" = "#95B3D7",
  "NYSE Arca Gold Bugs" = "#fdbf11",
  "S&P 500" = "#0C8040"
)


# Create a data frame for text annotations
text_data <- data.frame(
  index = c("EURO STOXX 50", "FTSE 100", "MSCI China",
            "Nasdaq-100", "NYSE Arca Gold Bugs", "S&P 500"),  
  label = c("Mild fluctuations, \nrelatively stable \noverall performance.", 
            "Small fluctuations, \nmostly flat \nwithout growth.",
            "Volatile, \nwith a noticeable \ndip.",
            "Few peaks, \nstable, and limited \nvolatility.",
            "Highly volatile \nwith sharp \nfluctuations throughout.", 
            "Stable performance, \nno drastic changes."),
  x = rep(2024, 6),  
  y = c(35, 35, 35, 35, 35, 35)  
)


break.vec <- c(as.numeric(2009),
               seq(from = as.numeric(2009), to = as.numeric(2023),
                   by = 2),
               as.numeric(2023))


p2 <- ggplot(df_long,
             aes(y = performance,
                 x = year,
                 color = index)) +
  geom_line(aes(group = index, colour = index), size = 0.4) +
  geom_point(size = 1.9) +
  annotate("segment", 
           x = 2009, xend = 2023.5, 
           y = 0, yend = 0, 
           colour = "grey60", 
           linewidth = 0.5)+
  facet_wrap(~index, scales = "free_y", nrow = 6) +
  scale_color_manual(values = index_colors) +
  scale_y_continuous(limits = c(-60, 70),
                     breaks = seq(-60, 70, by = 20),
                     labels = scales::percent_format(scale = 1)) +
  scale_x_continuous(breaks = break.vec,
                     expand = expansion(mult = c(0.08, 0.6))) +
  labs(
    title = "Annual Returns",
    subtitle = "Time period: 2009 to 2023",
    x = "",
    y = ""
  ) +
  theme_rdv() +
  theme(legend.position = "none",
        strip.text = element_text(family = "Lato", size = 12, hjust = 0.3),
        strip.text.y = element_text(angle = 0),
        plot.title.position = "panel",
        plot.subtitle = element_text(margin = margin(2,0,9,0))) +
  geom_text(data = text_data, aes(x = x, y = y, label = label),
            family = "Lato", size = 4, hjust = 0)


ggsave(p2, filename = "index_lineplot.png",
       width = 6, height = 10, dpi = 300)

```

::: grid
::: g-col-6

<h2 style="text-align: center;">Original Visualization</h2>
![](original_chart.png)

:::

::: g-col-6

<h2 style="text-align: center;">My Visualization</h2>
![](index_lineplot.png)

:::
:::